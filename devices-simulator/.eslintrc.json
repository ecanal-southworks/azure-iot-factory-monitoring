{
	"env": {
		"browser": true,
		"es6": true
	},
	"extends": [
		"plugin:@typescript-eslint/recommended",
		"plugin:@typescript-eslint/recommended-requiring-type-checking"
	],
	"parser": "@typescript-eslint/parser",
	"parserOptions": {
		"project": "tsconfig.json",
		"sourceType": "module"
	},
	"plugins": [
		"eslint-plugin-import",
		"eslint-plugin-jsdoc",
		"eslint-plugin-prefer-arrow",
		"eslint-plugin-unicorn",
		"eslint-plugin-no-null",
		"@typescript-eslint/eslint-plugin"
	],
	"rules": {
		"@typescript-eslint/adjacent-overload-signatures": "error",
		"@typescript-eslint/array-type": "off",
		"@typescript-eslint/await-thenable": "error",
		"@typescript-eslint/ban-types": [
			"error",
			{
				"types": {
					"Object": {
						"message": "Avoid using the `Object` type. Did you mean `object`?"
					},
					"Function": {
						"message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
					},
					"Boolean": {
						"message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
					},
					"Number": {
						"message": "Avoid using the `Number` type. Did you mean `number`?"
					},
					"String": {
						"message": "Avoid using the `String` type. Did you mean `string`?"
					},
					"Symbol": {
						"message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
					}
				}
			}
		],
		"@typescript-eslint/consistent-type-assertions": "error",
		"@typescript-eslint/dot-notation": "error",
		"@typescript-eslint/explicit-member-accessibility": [
			"error",
			{
				"accessibility": "explicit"
			}
		],
		"@typescript-eslint/indent": [
			"error",
			4,
			{
				"CallExpression": {
					"arguments": "first"
				},
				"ObjectExpression": "first",
				"FunctionDeclaration": {
					"parameters": "first"
				},
				"FunctionExpression": {
					"parameters": "first"
				},
				"SwitchCase": 1
			}
		],
		"@typescript-eslint/member-delimiter-style": [
			"error",
			{
				"multiline": {
					"delimiter": "semi",
					"requireLast": true
				},
				"singleline": {
					"delimiter": "semi",
					"requireLast": false
				}
			}
		],
		"no-param-reassign": "error",
		"@typescript-eslint/member-ordering": "error",
		"@typescript-eslint/naming-convention": [
			"error",
			{
				"selector": "property",
				"format": ["strictCamelCase", "UPPER_CASE"],
				"filter": {
					// you can expand this regex to add more allowed names
					"regex": "^(Authorization|Date)$",
					"match": false
				}
			}
		],
		"@typescript-eslint/no-empty-function": "off",
		"@typescript-eslint/no-empty-interface": "error",
		"@typescript-eslint/no-explicit-any": "error",
		"@typescript-eslint/no-floating-promises": "error",
		"@typescript-eslint/no-for-in-array": "error",
		"@typescript-eslint/no-inferrable-types": "off",
		"@typescript-eslint/no-misused-new": "error",
		"@typescript-eslint/no-namespace": "error",
		"@typescript-eslint/no-non-null-assertion": "error",
		"@typescript-eslint/no-parameter-properties": "off",
		"@typescript-eslint/no-require-imports": "error",
		"@typescript-eslint/no-this-alias": "error",
		"@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
		"@typescript-eslint/no-unnecessary-qualifier": "error",
		"@typescript-eslint/no-unnecessary-type-arguments": "error",
		"@typescript-eslint/no-unused-expressions": "error",
		"@typescript-eslint/no-use-before-define": "off",
		"@typescript-eslint/no-var-requires": "off",
		"@typescript-eslint/prefer-for-of": "error",
		"@typescript-eslint/prefer-function-type": "error",
		"@typescript-eslint/prefer-namespace-keyword": "error",
		"@typescript-eslint/prefer-readonly": "error",
		"@typescript-eslint/promise-function-async": "error",
		"@typescript-eslint/quotes": ["error", "single"],
		"@typescript-eslint/require-await": "error",
		"@typescript-eslint/restrict-plus-operands": "error",
		"@typescript-eslint/semi": ["error", "always"],
		"@typescript-eslint/triple-slash-reference": [
			"error",
			{
				"path": "always",
				"types": "prefer-import",
				"lib": "always"
			}
		],
		"@typescript-eslint/type-annotation-spacing": "error",
		"@typescript-eslint/unbound-method": "error",
		"@typescript-eslint/unified-signatures": "error",
		"arrow-body-style": ["error", "as-needed"],
		"arrow-parens": ["error", "as-needed"],
		"brace-style": ["error", "1tbs"],
		"capitalized-comments": ["off"],
		"comma-dangle": ["error", "always-multiline"],
		"complexity": "off",
		"constructor-super": "error",
		"curly": ["error", "multi-line"],
		"default-case": "error",
		"eol-last": "error",
		"eqeqeq": ["error", "always"],
		"guard-for-in": "error",
		"id-blacklist": [
			"error",
			"any",
			"Number",
			"number",
			"String",
			"string",
			"Boolean",
			"boolean",
			"Undefined",
			"undefined"
		],
		"id-match": "error",
		"import/no-default-export": "error",
		"import/no-deprecated": "warn",
		"import/no-extraneous-dependencies": "error",
		"import/no-unassigned-import": "off",
		"import/order": "error",
		"jsdoc/check-alignment": "error",
		"jsdoc/check-indentation": "error",
		"jsdoc/newline-after-description": "error",
		"jsdoc/no-types": "error",
		"max-classes-per-file": "off",
		"max-len": [
			"error",
			{
				"code": 140
			}
		],
		"new-parens": "error",
		"newline-per-chained-call": "error",
		"no-bitwise": "error",
		"no-caller": "error",
		"no-cond-assign": "error",
		"no-console": [
			"error",
			{
				"allow": [
					"log",
					"warn",
					"dir",
					"timeLog",
					"assert",
					"clear",
					"count",
					"countReset",
					"group",
					"groupEnd",
					"table",
					"dirxml",
					"error",
					"groupCollapsed",
					"Console",
					"profile",
					"profileEnd",
					"timeStamp",
					"context"
				]
			}
		],
		"no-debugger": "error",
		"no-duplicate-case": "error",
		"no-duplicate-imports": "error",
		"no-empty": "off",
		"no-eval": "error",
		"no-extra-bind": "error",
		"no-fallthrough": "error",
		"no-invalid-this": "error",
		"no-irregular-whitespace": "error",
		"no-new-wrappers": "error",
		"no-null/no-null": "error",
		"no-restricted-imports": ["error", "rxjs/Rx"],
		"no-restricted-syntax": ["error", "ForInStatement"],
		"no-return-await": "error",
		"no-sequences": "error",
		"no-shadow": [
			"error",
			{
				"hoist": "all"
			}
		],
		"no-sparse-arrays": "error",
		"no-throw-literal": "error",
		"no-trailing-spaces": "error",
		"no-undef-init": "error",
		"no-underscore-dangle": "error",
		"no-unsafe-finally": "error",
		"no-unused-labels": "error",
		"no-useless-constructor": "off",
		"@typescript-eslint/no-useless-constructor": "error",
		"no-var": "error",
		"object-shorthand": "error",
		"one-var": ["error", "never"],
		"padding-line-between-statements": [
			"error",
			{
				"blankLine": "always",
				"prev": "*",
				"next": "return"
			}
		],
		"prefer-arrow/prefer-arrow-functions": "error",
		"prefer-const": "error",
		"prefer-template": "error",
		"quote-props": [1, "consistent-as-needed", { "keywords": true }],
		"radix": "error",
		"space-before-function-paren": [
			"error",
			{
				"anonymous": "never",
				"asyncArrow": "always",
				"named": "never"
			}
		],
		"spaced-comment": [
			"error",
			"always",
			{
				"markers": ["/"]
			}
		],
		"unicorn/filename-case": [
			"error",
			{
				"cases": {
					"kebabCase": true
				}
			}
		],
		"use-isnan": "error",
		"valid-typeof": "off",
		"yoda": "error"
	}
}
